package hilos_y_sockets_servidor;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import peliculas.Pelicula;

public class HiloServidor implements Runnable{
	private Thread hilo;
	private static int numCliente = 0;
	private Socket socketToClient;	
	
	public HiloServidor(Socket socketToClient) {
		numCliente++;
		hilo = new Thread(this, "Cliente_"+numCliente);
		this.socketToClient = socketToClient;
		hilo.start();
	}
	
	public static Pelicula buscarPeliculaPorId(List<Pelicula> peliculas, int id) {
        for (Pelicula pelicula : peliculas) {
            if (pelicula.getId() == id) {
                return pelicula;
            }
        }
        return null;
    }
    
    public static Pelicula buscarPeliculaPorTitulo(List<Pelicula> peliculas, String titulo) {
        for (Pelicula pelicula : peliculas) {
            if (pelicula.getTitulo().equalsIgnoreCase(titulo)) {
                return pelicula;
            }
        }
        return null;
    }
    
    public static List<Pelicula> buscarPeliculaPorDirector(List<Pelicula> peliculas, String director) {
        List<Pelicula> peliculaDirectores = new ArrayList<>();
    	for (Pelicula pelicula : peliculas) {
            if (pelicula.getDirector().equalsIgnoreCase(director)) {
            	peliculaDirectores.add(pelicula);
            }
        }
    	if (peliculaDirectores.isEmpty()) {
    		return null;
    	}else {
    		return peliculaDirectores;
    	}
        
    }
    
    static List<Pelicula> peliculas = new ArrayList<>();

    static {
        peliculas.add(new Pelicula(1, "Pulp Fiction", "Quentin Tarantino", 15.99));
        peliculas.add(new Pelicula(2, "El Padrino", "Francis Ford Coppola", 19.95));
        peliculas.add(new Pelicula(3, "Scarface", "Brian De Palma", 9.90));
        peliculas.add(new Pelicula(4, "Million Dollar Baby", "Clint Eastwood", 5.95));
        peliculas.add(new Pelicula(5, "Kill Bill", "Quentin Tarantino", 17.5));
    }
	
	@Override
	public void run() {
		
		PrintStream salida = null;
		InputStreamReader entrada = null;
		BufferedReader bf = null;
		
		try {
			
			salida = new PrintStream(socketToClient.getOutputStream());
			entrada = new InputStreamReader(socketToClient.getInputStream());
			bf = new BufferedReader(entrada);
			
			String texto = "";
			boolean continuar = true;
			
			while(continuar) {
				
				String stringRecibido = bf.readLine();
				
				System.out.println("Ha llegado el siguiente String: " + stringRecibido);
				
				String[] peticionCliente = stringRecibido.split("-");
				
				int opcion = Integer.parseInt(peticionCliente[0]);
				
				Object respuesta = null;
				Pelicula pelicula = null;
				
					switch (opcion) {
						case 1:
							int idPelicula = Integer.parseInt(peticionCliente[1]);
							
							pelicula = buscarPeliculaPorId(peliculas, idPelicula);
					        if (pelicula != null) {
					        	respuesta = "ID: " + pelicula.getId() + " - Título: " + pelicula.getTitulo() + " - Director: " + pelicula.getDirector() + " - Precio: " + pelicula.getPrecio() + "€";
					        	System.out.println(respuesta);
					        } else {
					            respuesta = "No se encontró la película con el ID especificado.";
					            System.out.println(respuesta);
					        }
							salida = new PrintStream(socketToClient.getOutputStream());
							salida.print(respuesta);
					        
							break;
						
						case 2:
							String tituloPelicula = peticionCliente[1];
							pelicula = buscarPeliculaPorTitulo(peliculas, tituloPelicula);
					        if (pelicula != null) {
					        	respuesta = "ID: " + pelicula.getId() + " - Título: " + pelicula.getTitulo() + " - Director: " + pelicula.getDirector() + " - Precio: " + pelicula.getPrecio() + "€";
					        	System.out.println(respuesta);
					        } else {
					            respuesta = "No se encontró la película con el título especificado.";
					            System.out.println(respuesta);
					        }
							salida = new PrintStream(socketToClient.getOutputStream());
							salida.print(respuesta);
					        
							break;
							
						case 3:
							String directorPelicula = peticionCliente[1];
							List<Pelicula> directoresLista = new ArrayList<>();
							directoresLista = buscarPeliculaPorDirector(peliculas, directorPelicula);
							if (directoresLista != null) {
								respuesta = "";
								for (int i=0; i<directoresLista.size(); i++) {
									if (i>0) {
										respuesta += "&";
									}
									respuesta += Integer.toString(directoresLista.get(i).getId());
									respuesta += "-" + directoresLista.get(i).getTitulo();
									respuesta += "-" + directoresLista.get(i).getDirector();
									respuesta += "-" + Double.toString(directoresLista.get(i).getPrecio());
								}
								System.out.println(respuesta);
								
							}else{
					            respuesta = "No se encontró la película con el director especificado.";
					            System.out.println(respuesta);
							}
							
							salida = new PrintStream(socketToClient.getOutputStream());
							salida.print(respuesta);
							break;
							
						case 4:
							int id = Integer.parseInt(peticionCliente[1]);
							String titulo = peticionCliente[2];
							String director = peticionCliente[3];
							double precio = Double.parseDouble(peticionCliente[4]);
							
							peliculas.add(new Pelicula(id, titulo, director, precio));
							respuesta = "Película añadida correctamente";
							System.out.println(respuesta);
							salida = new PrintStream(socketToClient.getOutputStream());
							salida.print(respuesta);
							break;
					}
					
				socketToClient.close();
			}
			
		} catch (IOException e) {
			System.err.println("SERVIDOR: Error de entrada/salida");
			e.printStackTrace();
		} catch (Exception e) {
			System.err.println("SERVIDOR: Error");
			e.printStackTrace();
		}
	}
}